{"timestamp":"2025-07-21T01:43:50.161663","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-21T01:43:50.162762","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/etl_pipeline_v2.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-21T01:43:51.062891","level":"warning","event":"Passing literal json to 'read_json' is deprecated and will be removed in a future version. To read from a literal string, wrap it in a 'StringIO' object.","category":"FutureWarning","filename":"/opt/airflow/dags/etl_pipeline_v2.py","lineno":57,"logger":"py.warnings"}
{"timestamp":"2025-07-21T01:43:51.080493","level":"info","event":"Successfully connected to PostgreSQL database","logger":"loader"}
{"timestamp":"2025-07-21T01:43:51.082880","level":"info","event":"Tables already exist, skipping creation","logger":"loader"}
{"timestamp":"2025-07-21T01:43:51.087518","level":"info","event":"Found unique constraint(s): ['properties_property_id_key']","logger":"loader"}
{"timestamp":"2025-07-21T01:43:51.087973","level":"info","event":"Loading 8 properties to database using batch UPSERT","logger":"loader"}
{"timestamp":"2025-07-21T01:43:51.088387","level":"info","event":"Property IDs in data: 8 unique IDs","logger":"loader"}
{"timestamp":"2025-07-21T01:43:51.089472","level":"info","event":"Found 9 existing property_ids in database","logger":"loader"}
{"timestamp":"2025-07-21T01:43:51.090205","level":"info","event":"Found 8 existing property_ids that will be updated","logger":"loader"}
{"timestamp":"2025-07-21T01:43:51.090398","level":"info","event":"Sample duplicate IDs: ['9a19e153-cb45-43dc-a1e7-10f82a3097e3', '857ef9f8-af46-4d9f-ba3e-e3839243fb71', '52b52a55-f98a-4d98-865a-98721c63082c', '1b87659b-dc5c-4d2a-b312-c79a20de9abe', '1bda0555-4030-4105-82e4-dc924fe3d11c']","logger":"loader"}
{"timestamp":"2025-07-21T01:43:51.096090","level":"info","event":"Executing batch UPSERT with 8 records","logger":"loader"}
{"timestamp":"2025-07-21T01:43:51.096225","level":"info","event":"UPSERT Query: \n            INSERT INTO properties (property_id, title, price, bedrooms, area, bathrooms, property_type, property_type_standard, price_per_sqm, price_per_bedroom, city, neighborhood, listing_type, source, processed_date)\n            VALUES (:property_id, :title, :price, :bedrooms, :area, :bathrooms, :property_type, :property_type_standard, :price_per_sqm, :price_per_bedroom, :city, :neighborhood, :listing_type, :source, :processed_date)\n            ON CONFLICT (property_id) DO UPDATE SET\n                property_id = EXCLUDED.property_id, title = EXCLUDED.title, price = EXCLUDED.price, bedrooms = EXCLUDED.bedrooms, area = EXCLUDED.area, bathrooms = EXCLUDED.bathrooms, property_type = EXCLUDED.property_type, property_type_standard = EXCLUDED.property_type_standard, price_per_sqm = EXCLUDED.price_per_sqm, price_per_bedroom = EXCLUDED.price_per_bedroom, city = EXCLUDED.city, neighborhood = EXCLUDED.neighborhood, listing_type = EXCLUDED.listing_type, source = EXCLUDED.source, processed_date = EXCLUDED.processed_date\n            ","logger":"loader"}
{"timestamp":"2025-07-21T01:43:51.100949","level":"info","event":"Batch UPSERT completed successfully","logger":"loader"}
{"timestamp":"2025-07-21T01:43:51.101785","level":"info","event":"Successfully batch upserted 8 properties to database from DataFrame","logger":"loader"}
{"timestamp":"2025-07-21T01:43:51.102569","level":"info","event":"Database connection closed","logger":"loader"}
{"timestamp":"2025-07-21T01:43:51.103412","level":"info","event":"Done. Returned value was: 8","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-21T01:43:51.103588","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01982aa4-9313-7894-a656-a1f28c2a9fe1'), task_id='load', dag_id='realestate_etl_pipeline_v2', run_id='manual__2025-07-21T01:41:25.310062+00:00', try_number=1, map_index=-1, hostname='d9baf7fb2a61', context_carrier=None, task=<Task(PythonOperator): load>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=1, start_date=datetime.datetime(2025, 7, 21, 1, 43, 49, 968805, tzinfo=TzInfo(UTC)), end_date=None, is_mapped=False)","logger":"task"}
{"timestamp":"2025-07-21T01:43:51.106238Z","level":"info","event":"Loaded 8 properties into database","chan":"stdout","logger":"task"}
