{"timestamp":"2025-07-21T20:29:25.790941","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-21T20:29:25.794033","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/etl_pipeline_v2.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-21T20:29:26.945269","level":"warning","event":"Passing literal json to 'read_json' is deprecated and will be removed in a future version. To read from a literal string, wrap it in a 'StringIO' object.","category":"FutureWarning","filename":"/opt/airflow/dags/etl_pipeline_v2.py","lineno":57,"logger":"py.warnings"}
{"timestamp":"2025-07-21T20:29:26.987766","level":"info","event":"Successfully connected to PostgreSQL database","logger":"loader"}
{"timestamp":"2025-07-21T20:29:27.003903","level":"info","event":"All required tables already exist. Skipping creation.","logger":"loader"}
{"timestamp":"2025-07-21T20:29:27.004200","level":"info","event":"Tables in public schema: ['avg_price_by_bedroom', 'avg_price_by_location', 'correlation_analysis', 'correlation_matrix_view', 'properties', 'rent_increase_analysis', 'sales_valuation_analysis', 'statistics', 'yasameen_3br_report']","logger":"loader"}
{"timestamp":"2025-07-21T20:29:27.015565","level":"info","event":"Found unique constraint(s): ['properties_property_id_key']","logger":"loader"}
{"timestamp":"2025-07-21T20:29:27.016689","level":"info","event":"Loading 2 properties to database using batch UPSERT","logger":"loader"}
{"timestamp":"2025-07-21T20:29:27.018542","level":"info","event":"Property IDs in data: 2 unique IDs","logger":"loader"}
{"timestamp":"2025-07-21T20:29:27.060850","level":"info","event":"Found 10249 existing property_ids in database","logger":"loader"}
{"timestamp":"2025-07-21T20:29:27.061775","level":"info","event":"Found 2 existing property_ids that will be updated","logger":"loader"}
{"timestamp":"2025-07-21T20:29:27.063312","level":"info","event":"Sample duplicate IDs: ['1b87659b-dc5c-4d2a-b312-c79a20de9abe', '8919c293-2380-42d1-bceb-52605c8d27e0']","logger":"loader"}
{"timestamp":"2025-07-21T20:29:27.087592","level":"info","event":"Executing batch UPSERT with 2 records","logger":"loader"}
{"timestamp":"2025-07-21T20:29:27.088037","level":"info","event":"UPSERT Query: \n            INSERT INTO properties (property_id, price, bedrooms, area, bathrooms, property_type, property_type_standard, price_per_sqm, price_per_bedroom, city, neighborhood, listing_type, source, processed_date, created_at)\n            VALUES (:property_id, :price, :bedrooms, :area, :bathrooms, :property_type, :property_type_standard, :price_per_sqm, :price_per_bedroom, :city, :neighborhood, :listing_type, :source, :processed_date, :created_at)\n            ON CONFLICT (property_id) DO UPDATE SET\n                property_id = EXCLUDED.property_id, price = EXCLUDED.price, bedrooms = EXCLUDED.bedrooms, area = EXCLUDED.area, bathrooms = EXCLUDED.bathrooms, property_type = EXCLUDED.property_type, property_type_standard = EXCLUDED.property_type_standard, price_per_sqm = EXCLUDED.price_per_sqm, price_per_bedroom = EXCLUDED.price_per_bedroom, city = EXCLUDED.city, neighborhood = EXCLUDED.neighborhood, listing_type = EXCLUDED.listing_type, source = EXCLUDED.source, processed_date = EXCLUDED.processed_date\n            ","logger":"loader"}
{"timestamp":"2025-07-21T20:29:27.095242","level":"info","event":"Batch UPSERT completed successfully","logger":"loader"}
{"timestamp":"2025-07-21T20:29:27.095575","level":"info","event":"Successfully batch upserted 2 properties to database from DataFrame","logger":"loader"}
{"timestamp":"2025-07-21T20:29:27.097155","level":"info","event":"Database connection closed","logger":"loader"}
{"timestamp":"2025-07-21T20:29:27.101911Z","level":"info","event":"Loaded 2 properties into database","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-21T20:29:27.098793","level":"info","event":"Done. Returned value was: 2","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-21T20:29:27.099146","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01982eac-341f-7b1d-ac01-b79b6bf8d9eb'), task_id='load', dag_id='realestate_etl_pipeline_v2', run_id='manual__2025-07-21T20:28:14.088289+00:00', try_number=1, map_index=-1, hostname='153eb81b0c0f', context_carrier=None, task=<Task(PythonOperator): load>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=1, start_date=datetime.datetime(2025, 7, 21, 20, 29, 25, 669291, tzinfo=TzInfo(UTC)), end_date=None, is_mapped=False)","logger":"task"}
