{"timestamp":"2025-07-21T18:10:47.769465","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-21T18:10:47.770885","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/load_historical_data.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-21T18:10:50.057684","level":"info","event":"Loading only the historical data file...","logger":"transformer"}
{"timestamp":"2025-07-21T18:10:52.695820","level":"info","event":"Loaded 99969 records from data/raw/realstate_data_2014_2016.csv (utf-8)","logger":"transformer"}
{"timestamp":"2025-07-21T18:10:52.699011","level":"info","event":"Total raw records loaded: 99969","logger":"transformer"}
{"timestamp":"2025-07-21T18:10:54.450367","level":"info","event":"Price per sqm - Min: 0.05272727272727273, Max: 100000.0, Mean: 4581.303909547972","logger":"transformer"}
{"timestamp":"2025-07-21T18:10:54.451419","level":"info","event":"Price per bedroom - Min: 11.0, Max: 1000000.0, Mean: 336141.05722317763","logger":"transformer"}
{"timestamp":"2025-07-21T18:10:54.792452","level":"info","event":"Warehouse data saved to data/warehouse/riyadh_yasmeen_malga.csv","logger":"transformer"}
{"timestamp":"2025-07-21T18:10:54.792718","level":"info","event":"Data quality report saved to data/warehouse/quality_report.json","logger":"transformer"}
{"timestamp":"2025-07-21T18:10:54.818634","level":"info","event":"Successfully connected to PostgreSQL database","logger":"loader"}
{"timestamp":"2025-07-21T18:10:54.823787","level":"info","event":"Tables already exist, skipping creation","logger":"loader"}
{"timestamp":"2025-07-21T18:10:54.836644","level":"info","event":"Loading 10021 properties to database using batch UPSERT","logger":"loader"}
{"timestamp":"2025-07-21T18:10:54.839512","level":"info","event":"Property IDs in data: 10021 unique IDs","logger":"loader"}
{"timestamp":"2025-07-21T18:10:54.842986","level":"info","event":"Found 226 existing property_ids in database","logger":"loader"}
{"timestamp":"2025-07-21T18:10:54.847417","level":"info","event":"All property_ids are new - will be inserted","logger":"loader"}
{"timestamp":"2025-07-21T18:10:58.951087","level":"info","event":"Executing batch UPSERT with 10021 records","logger":"loader"}
{"timestamp":"2025-07-21T18:10:58.951655","level":"info","event":"UPSERT Query: \n            INSERT INTO properties (property_id, price, bedrooms, area, bathrooms, property_type, property_type_standard, price_per_sqm, price_per_bedroom, city, neighborhood, listing_type, source, processed_date, created_at)\n            VALUES (:property_id, :price, :bedrooms, :area, :bathrooms, :property_type, :property_type_standard, :price_per_sqm, :price_per_bedroom, :city, :neighborhood, :listing_type, :source, :processed_date, :created_at)\n            ON CONFLICT (property_id) DO UPDATE SET\n                property_id = EXCLUDED.property_id, price = EXCLUDED.price, bedrooms = EXCLUDED.bedrooms, area = EXCLUDED.area, bathrooms = EXCLUDED.bathrooms, property_type = EXCLUDED.property_type, property_type_standard = EXCLUDED.property_type_standard, price_per_sqm = EXCLUDED.price_per_sqm, price_per_bedroom = EXCLUDED.price_per_bedroom, city = EXCLUDED.city, neighborhood = EXCLUDED.neighborhood, listing_type = EXCLUDED.listing_type, source = EXCLUDED.source, processed_date = EXCLUDED.processed_date\n            ","logger":"loader"}
{"timestamp":"2025-07-21T18:11:07.392342","level":"info","event":"Batch UPSERT completed successfully","logger":"loader"}
{"timestamp":"2025-07-21T18:11:07.392812","level":"info","event":"Successfully batch upserted 10021 properties to database from DataFrame","logger":"loader"}
{"timestamp":"2025-07-21T18:11:07.422411","level":"info","event":"Database connection closed","logger":"loader"}
{"timestamp":"2025-07-21T18:11:07.424054Z","level":"info","event":"Loaded 10021 historical records","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-21T18:11:07.456986","level":"info","event":"Done. Returned value was: 10021","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-21T18:11:07.457599","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01982e2e-5aaf-7d8a-8e6e-321525a88de1'), task_id='load_historical', dag_id='load_historical_data', run_id='manual__2025-07-21T18:02:18.679703+00:00', try_number=5, map_index=-1, hostname='153eb81b0c0f', context_carrier=None, task=<Task(PythonOperator): load_historical>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=5, start_date=datetime.datetime(2025, 7, 21, 18, 10, 47, 321728, tzinfo=TzInfo(UTC)), end_date=None, is_mapped=False)","logger":"task"}
